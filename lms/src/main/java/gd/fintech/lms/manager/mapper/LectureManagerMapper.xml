<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="gd.fintech.lms.manager.mapper.LectureManagerMapper">
	<!-- 운영자가 개설한 강좌의 리스트 -->
	<select id="selectLectureListByPage" parameterType="java.util.Map" resultType="gd.fintech.lms.manager.vo.Lecture">
		SELECT
			lecture_no lectureNo,
			teacher_name teacherName,
			lecture_name lectureName,
			lecture_startdate lectureStartDate,
			lecture_enddate lectureEndDate,
			lecture_total lectureTotal
		FROM lecture
		LIMIT #{beginRow},#{rowPerPage}
	</select>
	
	<!-- 총 강좌 수 -->
	<select id="selectLectureCount" resultType="int">
		SELECT
			COUNT(*)
		FROM lecture
	</select>

	<!-- 강좌에서의 강의실 정보 -->
	<select id="selectLectureClassroomList" parameterType="java.util.Map" resultType="gd.fintech.lms.manager.vo.Classroom">
		SELECT
			classroom_no classroomNo,
			classroom_number classroomNumber
		FROM classroom
	</select>
	
	<!-- 강좌에서의 교재 정보 -->
	<select id="selectLectureTextbookList" parameterType="java.util.Map" resultType="gd.fintech.lms.manager.vo.Textbook">
		SELECT
			textbook_isbn textbookISBN,
			textbook_title textbookTitle
		FROM textbook
	</select>
	
	<!-- 강좌에서의 강사 정보 -->
	<select id="selectLectureTeacherList" parameterType="java.util.Map" resultType="gd.fintech.lms.teacher.vo.Teacher">
		SELECT account_id accountId
		FROM teacher
	</select>
	
	<!-- 강좌에서의 과목 정보 -->
	<select id="selectLectureSubjectList" parameterType="java.util.Map" resultType="gd.fintech.lms.manager.vo.Subject">
		SELECT
			subject_no subjectNo,
			subject_name subjectName
		FROM subject
	</select>
	
	<!-- 강좌 개설 -->
	<insert id="insertLecture" parameterType="gd.fintech.lms.manager.vo.Lecture">
		INSERT INTO lecture(
			account_id,
			subject_no,
			teacher_name,
			lecture_name,
			textbook_isbn,
			lecture_startdate,
			lecture_enddate,
			lecture_total,
			classroom_no,
			lecture_createdate,
			lecture_updatedate
		)VALUES (
			#{accountId},
			#{subjectNo},
			#{teacherName},
			#{lectureName},
			#{textbookISBN},
			#{lectureStartDate},
			#{lectureEndDate},
			#{lectureTotal},
			#{classroomNo},
			NOW(),
			NOW()
	
		)
	</insert>
	
	<!-- 강좌 수정 -->
	<update id="updateLecture" parameterType="gd.fintech.lms.manager.vo.Lecture">
		UPDATE lecture
		SET
			account_id = #{accountId},
			subject_no = #{subjectNo},
			teacher_name =#{teacherName},
			lecture_name =#{lectureName},
			textbook_isbn =#{textbookISBN},
			lecture_startdate =#{lectureStartDate},
			lecture_endDate =#{lectureEndDate},
			lecture_total =#{lectureTotal},
			classroom_no =#{classroomNo},
			lecture_updatedate = NOW()
		WHERE lecture_no =#{lectureNo}
	</update>
	
	<!-- 강좌에서 강사id로  강사 이름 검색  -->
	<select id="selectTeacherName" parameterType="String" resultType="String">
		 SELECT teacher_name teacherName
	 	 FROM teacher
 		 WHERE account_id =#{accountId}
	</select>
	
	<!-- 강좌에서 강사 이름 확인 -->
	<select id="selectTeacherNameCk" parameterType="String" resultType="String">
	  SELECT
	 	account_id accountId,
	 	teacher_name teacherName
	  FROM teacher
 	 WHERE
 	 	account_id =#{accountId}
		AND teacher_name =#{teacherName}
	
	</select> 
	
	<!-- accountId로 불러오는 강좌 정보 -->
	<select id="selectTeacherLectureDetail" parameterType="String" resultType="gd.fintech.lms.manager.vo.Lecture">
		SELECT
			lecture_no lectureNo,
			teacher_name teacherName,
			lecture_name lectureName,
			lecture_startdate lectureStartDate,
			lecture_enddate lectureEndDate,
			lecture_total lectureTotal,
			lecture_updatedate lectureUpdateDate
		FROM lecture
		WHERE account_id =#{accountId}
	</select>

	<!-- 강좌정보 및 강의실정보 및 과목정보 및 교재정보를 출력하는 쿼리를 위한 resultMap -->
	<resultMap type="gd.fintech.lms.manager.vo.Lecture" id="resultLectureDetail">
		<result property="lectureNo" column="lecture_no" />
		<result property="accountId" column="account_id" />
		<result property="subjectNo" column="subject_no" />
		<result property="teacherName" column="teacher_Name" />
		<result property="lectureName" column="lecture_Name" />
		<result property="textbookISBN" column="textbook_isbn" />
		<result property="lectureStartDate" column="lecture_startdate" />
		<result property="lectureEndDate" column="lecture_enddate" />
		<result property="lectureTotal" column="lecture_total" />
		<result property="classroomNo" column="classroom_no" />
		<result property="lectureCreateDate" column="lecture_createdate" />
		<result property="lectureUpdateDate" column="lecture_updatedate" />		
			<collection property="subject" ofType="gd.fintech.lms.manager.vo.Subject">
				<result property="subjectNo" column="subject_no" />
				<result property="subjectName" column="subject_name" />
			</collection>
				<collection property="classroom" ofType="gd.fintech.lms.manager.vo.Classroom">
					<result property="classroomNo" column="classroom_no" />
					<result property="classroomNumber" column="classroom_number" />
				</collection>
					<collection property="textbook" ofType="gd.fintech.lms.manager.vo.Textbook">
						<result property="textbookISBN" column="textbook_isbn" />
						<result property="textbookTitle" column="textbook_title" />
						<result property="textbookWriter" column="textbook_writer" />
						<result property="textbookPrice" column="textbook_price" />
					</collection>
						
	</resultMap>
	<select id="selectLectureDetail" parameterType="int" resultMap="resultLectureDetail">
		SELECT
			l.lecture_no,
			l.account_id,
			l.subject_no,
			s.subject_name,
			l.teacher_name,
			l.lecture_name,
			l.textbook_isbn,
			t.textbook_title,
			t.textbook_writer,
			t.textbook_price,
			l.lecture_startdate,
			l.lecture_enddate,
			l.lecture_total,
			l.classroom_no,
			c.classroom_number
		FROM lecture l
			LEFT JOIN subject s
				ON l.subject_no = s.subject_no
			LEFT JOIN textbook t
				ON l.textbook_isbn = t.textbook_isbn
			LEFT JOIN classroom c
				ON l.classroom_no = c.classroom_no
		WHERE l.lecture_no = #{lectureNo}
	</select>
	<!-- 대기중 강좌 리스트 -->
	<select id="selectlectureStudentList"  parameterType="java.util.Map" resultType="gd.fintech.lms.student.vo.ClassRegistration">
		SELECT
			l.lecture_no lectureNo,
			l.lecture_name lectureName,
			cr.account_id accountId,
			cr.class_registration_state  classRegistrationState
		FROM class_registration cr
		INNER JOIN lecture l ON cr.lecture_no = l.lecture_no
		WHERE
			cr.class_registration_state = '대기' AND
			l.lecture_no = #{lectureNo}
	</select>
	<!-- 수강중으로 변환 -->
	<update id="updatelectureStudentCk" parameterType="gd.fintech.lms.student.vo.ClassRegistration" >
	UPDATE class_registration
	SET class_registration_state = '수강중'
	WHERE
		lecture_no = #{lectureNo} AND
		account_id = #{accountId}
	</update>
	<!--  거절로 변환 -->
	<update id="updatelectureStudentReject" parameterType="gd.fintech.lms.student.vo.ClassRegistration">
	UPDATE class_registration
	SET class_registration_state = '거절'
	WHERE
		lecture_no = #{lectureNo} AND
		account_id = #{accountId}
	</update>
</mapper>