<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="gd.fintech.lms.student.mapper.QuestionMapper">
	<!--질문게시판 전체 리스트 페이징-->
	<select id="selectQuestionListByPage" parameterType="java.util.Map" resultType="gd.fintech.lms.student.vo.Question">
		SELECT
			question_no questionNo,
			Lecture_no lectureNo,
			account_id accountId,
			question_writer questionWriter,
			question_title questionTitle,
			question_content questionContent,
			question_createdate questionCreateDate,
			question_updatedate questionUpdateDate,
			question_count questionCount
		FROM question
		<if test='studentLectureSearch !=null'>
				question_title LIKE CONCAT('%',#{studentQuestionSearch},'%')
		</if>
		ORDER BY question_no DESC
		LIMIT #{beginRow}, #{rowPerPage}
	</select>
	
	<!-- 해당 학생 질문의 리스트 -->
	<select id="selectStudentQuestionListByPage" parameterType="java.util.Map" resultType="gd.fintech.lms.student.vo.Question">
		SELECT
			question_no questionNo,
			lecture_no lectureNo,
			account_id accountId,
			question_writer questionWriter,
			question_title questionTitle,
			question_content questionContent,
			question_createdate questionCreateDate,
			question_updatedate questionUpdateDate,
			question_count questionCount
		FROM question
		<where>
			account_id=#{accountId}
			<if test='studentQuestionSearch !=null'>
				AND(
					question_title LIKE CONCAT('%',#{studentQuestionSearch},'%')
				)
			</if>
		</where>  
		ORDER BY question_no DESC
		LIMIT #{beginRow},#{rowPerPage}
	</select>
	
	<!-- 강좌별 질문게시판 -->
	<select id="selectLectureQuestionListByPage" parameterType=  "java.util.Map" resultType="gd.fintech.lms.student.vo.Question">
		SELECT
			question_no questionNo,
			lecture_no lectureNo,
			account_id accountId,
			question_writer questionWriter,
			question_title questionTitle,
			question_content questionContent,
			question_createdate questionCreateDate,
			question_updatedate questionUpdateDate,
			question_count questionCount
		FROM question
		<where>
			lecture_no=#{lectureNo}
			<if test='studentLectureSearch !=null'>
				AND(
					question_title LIKE CONCAT('%',#{studentLectureSearch},'%')
				)
			</if>
		</where> 
		ORDER BY question_no DESC
		LIMIT #{beginRow} ,#{rowPerPage}
	</select>
	
	<!-- 학생들의 전체 질문 갯수 -->
	<select id="selectQuestionCount" resultType="int">
		SELECT 
			COUNT(*) 
		FROM question
		<if test='studentLectureSearch !=null'>
			AND(
				question_title LIKE CONCAT('%',#{studentQuestionSearch},'%')
			)
		</if>
	</select>
	
	<!-- 해당 학생의 질문 갯수 -->
	<select id="studentQuestionCount" resultType="int">
		SELECT 
			COUNT(*) 
		FROM question
		<where>
			account_id = #{accountId}
		<if test='studentMyQuestionSearch !=null'>
			AND(
				question_title LIKE CONCAT('%',#{studentMyQuestionSearch},'%')
			)
		</if>
		</where>	
	</select>
	
	<!-- 해당 강좌의 학생 질문 갯수 -->
	<select id="lectureQuestionCount" resultType="int">
		SELECT 
			COUNT(*) questionCount
		FROM question
		<where>
			lecture_no=#{lectureNo}
		<if test='studentLectureSearch !=null'>
			AND(
				question_title LIKE CONCAT('%',#{studentLectureSearch},'%')
			)
		</if>
		</where>
	</select>
	
	<!--  학생 질문 목록 강사의 댓글과 파일 리스트 -->
	<resultMap type="gd.fintech.lms.student.vo.Question" id="resultQuestionOne">
		<result property="questionNo" column="question_no"/>
		<result property="lectureNo" column="lecture_no"/>
		<result property="accountId" column="student_id"/>
		<result property="questionWriter" column="question_writer"/>
		<result property="questionTitle" column="question_title"/>
		<result property="questionContent" column="question_content"/>
		<result property="questionCreateDate" column="question_createdate"/>
		<result property="questionUpdateDate" column="question_updatedate"/>
		<result property="questionCount" column="question_count"/>
		<result property="questionPassword" column="question_password"/>
		
		<collection property="questionComment" ofType="gd.fintech.lms.teacher.vo.QuestionComment">
			<result property="questionCommentNo" column="question_comment_no"/>
			<result property="questionNo" column="question_no"/>
			<result property="accountId" column="teacher_id"/>
			<result property="questionCommentWriter" column="question_comment_writer"></result>
			<result property="questionCommentContent" column="question_comment_content"/>
			<result property="questionCommentCreateDate" column="question_comment_createdate"/>
			<result property="questionCommentUpdateDate" column="question_comment_updatedate"/>
			 
			<collection property="questionCommentFileList" ofType="gd.fintech.lms.teacher.vo.QuestionCommentFile">
				<result property="questionCommentFileUUID" column="question_comment_file_uuid"/>
				<result property="questionCommentFileOriginal" column="question_comment_file_original"/>
				<result property="questionCommentNo" column="qeustion_comment_no"/>
				<result property="questionCommentFileSize" column="question_comment_file_size"/>
				<result property="questionCommentFileType" column="question_comment_file_type"/>
				<result property="questionCommentFileCount" column="question_comment_file_count"/>
				<result property="questionCommentFileCreateDate" column="question_comment_file_createdate"/>
			</collection>
		</collection>
	</resultMap>
	
	<!-- 학생의 질문 상세보기 -->
	<select id="selectQuestionOne" parameterType="int" resultMap="resultQuestionOne">
		SELECT
			q.question_no,
			q.lecture_no,
			q.account_id student_id,
			q.question_writer,
			q.question_title,
			q.question_content,
			q.question_createdate,
			q.question_updatedate,
			q.question_count,
			q.question_password,
			qc.question_comment_no,
			qc.question_no,
			qc.account_id teacher_id,
			qc.question_comment_writer,
			qc.question_comment_content,
			qc.question_comment_createdate,
			qc.question_comment_updatedate, 
			qcf.question_comment_file_uuid,
			qcf.question_comment_file_original,
			qcf.question_comment_no,
			qcf.question_comment_file_size,
			qcf.question_comment_file_type,
			qcf.question_comment_file_count,
			qcf.question_comment_file_createdate
		FROM question q
			LEFT JOIN question_comment qc
				ON q.question_no = qc.question_no
			LEFT JOIN question_comment_file qcf
				ON qc.question_comment_no = qcf.question_comment_no
		WHERE q.question_no=#{questionNo}	   
	</select>
	 
	
	
	
	<!-- 학생의 질문 추가  -->
	<insert id="insertQuestion">
		INSERT INTO question(
			lecture_no,
			account_id ,
			question_writer,
			question_title,
			question_content,
			question_createdate,
			question_updatedate
		
		
		) VALUES (
			#{lectureNo},
			#{accountId},
			#{questionWriter},
			#{questionTitle},
			#{questionContent},
			NOW(),
			NOW()
		
		)	
	</insert>
	
	<!-- 학생의 질문 수정 -->
	<update id="updateQuestion" parameterType="gd.fintech.lms.student.vo.Question">
		UPDATE question
		SET
			question_title=#{questionTitle},
			question_content=#{questionContent},
			question_updatedate=NOW()
		WHERE question_no=#{questionNo}
	</update>
	
	<!-- 학생의 (자신의) 질문 삭제 -->
	<delete id="deleteQuestion" parameterType="int">
		DELETE FROM question WHERE question_no=#{questionNo}
	</delete>
	
	<!-- 질문 조회수 -->
	<update id="increaseQuestionCount" parameterType="gd.fintech.lms.student.vo.Question">
		UPDATE question
		SET question_count = question_count + 1
		WHERE question_no = #{questionNo}
	</update>
	
	
	
</mapper>