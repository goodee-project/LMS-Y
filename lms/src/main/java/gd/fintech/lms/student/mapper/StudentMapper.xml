<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="gd.fintech.lms.student.mapper.StudentMapper">

	<resultMap type="gd.fintech.lms.student.vo.Student" id="studentLicense">
		<result property="accountId" column="account_id"/>
		<result property="studentEmail" column="student_email"/>
		<result property="studentName" column="student_name"/>
		<result property="studentPhone" column="student_phone"/>
		<result property="studentBirth" column="student_birth"/>
		<result property="studentAddressMain" column="student_address_main"/>
		<result property="studentAddressSub" column="student_address_sub"/>
		<result property="studentAccessDate" column="student_accessdate"/>
		<result property="studentUpdateDate" column="student_updatedate"/>
		<result property="mangerIdAccess" column="manager_id_access"/>
		<collection property="licenseList" ofType="gd.fintech.lms.account.vo.License">
			<result property="licenseNo" column="license_no"/>
			<result property="accountId" column="account_id"/>
			<result property="licenseNumber" column="license_number"/>
			<result property="licenseName" column="license_name"/>
			<result property="licenseAgency" column="license_agency"/>
			<result property="licenseGetDate" column="license_getdate"/>
		</collection>
	</resultMap>
	<!-- 학생 회원가입시 필요한 기본정보 -->
	<insert id="insertStudentFromQueue" parameterType="java.util.Map">
		INSERT INTO student(
			account_id,
			student_email,
			student_name,
			student_phone,
			student_gender,
			student_birth,
			student_address_main,
			student_address_sub,
			student_accessdate,
			student_updatedate,
			manager_id_access
		) SELECT
			account_id,
			student_email,
			student_name,
			student_phone,
			student_gender,
			student_birth,				
			student_address_main,
			student_address_sub,
			NOW(),
			NOW(),
			#{managerIdAccess}
		FROM student_queue
		WHERE account_id= #{accountId}
	</insert>
	<!-- 학생(내정보) 상세보기-->
	<select id="selectStudentOne" parameterType="String" resultType="gd.fintech.lms.student.vo.Student">
		SELECT
			account_id accountId,
			student_email studentEmail,
			student_name studentName,
			student_phone studentPhone,
			student_address_main studentAddressMain,
			student_address_sub studentAddressSub,
			student_birth studentBirth,
			student_gender studentGender,
			student_Image studentImage,
			student_accessdate studentAccessDate,
			student_updatedate studentUpdateDate,
			manager_id_access mangerIdAccess
		FROM student
		WHERE account_id=#{accountId}
		
	</select>
	<!-- 학생 자격증정보 보기 -->
	<select id="selectStudentLisence" parameterType="String" resultMap="studentLicense">
		SELECT
		s.account_id,
		s.student_name,
		l.license_no,
		l.account_id,
		l.license_number,
		l.license_name,
		l.license_agency,
		l.license_getdate
			
		FROM student s
		LEFT JOIN 
			license l
		ON  s.account_id = l.account_id
		WHERE s.account_id=#{accountId}
		
		
	</select>
	
	<!-- 학생 정보 수정 액션-->
	<update id="updateStudent" parameterType="gd.fintech.lms.student.vo.Student" >
		UPDATE student
		<set>
			<if test="studentName !=null">student_name=#{studentName},</if>
			<if test="studentEmail !=null">student_email=#{studentEmail},</if>
			<if test="studentPhone !=null">student_Phone=#{studentPhone},</if>
			<if test="studentAddressMain !=null">student_address_main=#{studentAddressMain},</if>
			<if test="studentAddressSub !=null">student_address_sub=#{studentAddressSub},</if>
			<if test="studentGender !=null">student_gender=#{studentGender},</if>
			<if test="studentBirth !=null">student_birth=#{studentBirth},</if>
			<if test="studentImage !=null">student_Image=#{studentImage},</if>
			student_updatedate=NOW()
		</set>
		WHERE account_id=#{accountId}
	</update>
	
	<!-- account-image 학생 이미지 추가 -->
	<insert id="insertStudentImage" parameterType="gd.fintech.lms.student.vo.AccountImage">
	INSERT INTO account_image(
			account_id,
			image_file_uuid,
			image_file_original,
			image_file_size,
			image_file_type,
			image_file_createdate
		) VALUES (
			#{accountId},
			#{imageFileUUID},
			#{imageFileOriginal},
			#{imageFileSize},
			#{imageFileType},
			NOW()
		)
	</insert>
	
	<!-- 학생 이미지 조회 -->
	<select id="selectMyImage" parameterType="String" resultType="gd.fintech.lms.student.vo.AccountImage">
      SELECT
         account_id accountId,
         image_file_uuid imageFileUUID,
         image_file_original imageFileOriginal,
         image_file_size imageFileSize,
         image_file_type imageFileType,
         image_file_createdate imageFileCreateDate
      FROM account_image
      WHERE account_id = #{accountId}
   </select>
	
	<!-- 학생 이미지 카운트 -->
   	<select id="selectImageFileUUIDCk" parameterType="String" resultType="String">
      SELECT
            image_file_uuid
      FROM account_image
      WHERE account_id = #{accountId}
   	</select>
   	
   	<!-- 학생 이미지파일 삭제 -->
   	<delete id="deleteMyImage" parameterType="String">
   		DELETE FROM account_image
      	WHERE account_id = #{accountId}
   	</delete>
   	
   	<!-- 학생 사진 수정 -->
   	<update id="updateStudentImage" parameterType="java.util.Map">
   	 	UPDATE student
      <set>
         <if test="studentImage !=null">student_image = #{studentImage},</if>
         student_updatedate = NOW()
      </set>
      WHERE account_id = #{accountId}
   	</update>
   	
   	<!-- 학생 이미지파일 수정 -->
   	<update id="updateImageFile" parameterType="java.util.Map">
   		UPDATE account_image
      SET
         image_file_uuid = #{imageFileUUID},
         image_file_original = #{imageFileOriginal},
         image_file_size = #{imageFileSize},
         image_file_type = #{imageFileType},
         image_file_createdate = NOW()
      WHERE account_id = #{accountId}
   	</update>
   	
   	<!-- 이미지 수정 버튼 추가-> 삭제버튼 클릭 -->
   	<update id="updateStudentImgbyDelete" parameterType="gd.fintech.lms.student.vo.Student">
   		UPDATE student
     	 SET
         	student_image = NULL,
         	student_updatedate = NOW()
      	WHERE account_id = #{accountId}
   	</update>
   	
   	<!-- 이미지 수정시 현재 이미지 출력 -->
	<select id="selectStudentImageanddelete" parameterType="String" resultType="String">
      SELECT student_image
      FROM student
      WHERE  account_id = #{accountId}
   </select>
	<!-- 계정에 해당하는 학생 이름 -->
	<select id="selectStudentName" parameterType="String" resultType="String">
	 	SELECT 
	 		student_name studentName
	 	FROM student 
		WHERE account_id = #{accountId}  		
	</select>
	
	<!-- 학생 이메일 체크 -->
	<select id="selectStudentEmail" parameterType="String" resultType="String">
		SELECT 
				student_email studentEmail
		FROM student
		WHERE account_id = #{accountId} and student_email = #{studentEmail}
	</select>
	
	<!-- 현재 비밀번호 확인 -->
	<select id="selectStudentPw" parameterType="String" resultType="String">
		SELECT 
			COUNT(*),
			account_id accountId,
			account_pw accountPw
		FROM account
		WHERE account_pw = PASSWORD(#{accountPw}) and account_id = #{accountId}
	</select>
	
	<!-- 학생 비밀번호 변경 -->
	<update id="updateStudentPw" parameterType="gd.fintech.lms.account.vo.Account">
		UPDATE account
		SET
			account_pw =PASSWORD(#{accountPw}),
			account_updateDate = NOW()
		WHERE account_id = #{accountId}
	</update>
	
	<!-- 자격증을 입력하기 위한 쿼리 -->
	<insert id="insertLicense" parameterType="gd.fintech.lms.account.vo.License">
		INSERT INTO license (
			account_Id,
			license_number,
			license_name,
			license_agency,
			license_getdate
		) VALUES (
			#{accountId},
			#{licenseNumber},
			#{licenseName},
			#{licenseAgency},
			#{licenseGetDate}
		)
	</insert>
	
	<!-- 계정의 자격증 리스트 중 하나만 삭제하기 위한 쿼리 -->
	<delete id="deleteLicenseByLicenseNo" parameterType="int">
		DELETE FROM license
		WHERE license_no = #{licenseNo}
	</delete>
	
</mapper>

